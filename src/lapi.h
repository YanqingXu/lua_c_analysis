/*
** ====================================================================
** Lua API 辅助函数头文件 (lapi.h)
** ====================================================================
** 
** 文件标识: $Id: lapi.h,v 2.2.1.1 2007/12/27 13:02:25 roberto Exp $
** 功能描述: Lua C API 的内部辅助函数声明
** 版权信息: 参见 lua.h 中的版权声明
** 
** 模块概述:
** 本头文件定义了 Lua C API 实现中使用的内部辅助函数。这些函数主要
** 用于在 Lua API 的实现过程中，处理 Lua 值对象和栈操作的底层细节。
** 
** 设计目标:
** - 提供 API 实现的核心辅助功能
** - 封装底层对象操作的复杂性
** - 维护 API 接口的一致性和安全性
** - 优化频繁使用的操作路径
** 
** 依赖关系:
** - lobject.h: Lua 对象系统定义
** - lua.h: 主要 API 接口定义
** - lstate.h: Lua 状态管理（间接依赖）
** 
** 注意事项:
** - 这是内部实现文件，不应被用户代码直接使用
** - 所有函数都假设调用环境的正确性
** - 不进行参数有效性检查，由调用者保证
** ====================================================================
*/

/*
** ====================================================================
** [预处理] 头文件保护和依赖包含
** ====================================================================
*/

#ifndef lapi_h
#define lapi_h

/*
** ====================================================================
** [依赖] 核心依赖模块包含
** ====================================================================
*/

/*
** [核心依赖] Lua 对象系统
** 
** 包含 lobject.h 以获取：
** - TValue 结构体定义（Lua 值的统一表示）
** - 各种 Lua 类型的宏定义和操作函数
** - 对象类型检查和转换宏
** - 内存管理和垃圾回收相关定义
*/
#include "lobject.h"


/*
** ====================================================================
** [核心] API 辅助函数接口声明
** ====================================================================
*/

/*
** [核心] 对象值压栈函数
**
** 功能：将一个 TValue 对象压入 Lua 栈顶
** @param L: lua_State* Lua 虚拟机状态指针
** @param o: const TValue* 要压入栈的 Lua 值对象
**
** 详细说明：
** 这是 Lua API 实现中的核心辅助函数，负责将内部的 TValue 对象
** 转换并压入 Lua 栈。该函数处理了所有 Lua 数据类型的正确压栈。
**
** 支持的数据类型：
** - LUA_TNIL: nil 值
** - LUA_TBOOLEAN: 布尔值 (true/false)
** - LUA_TNUMBER: 数字值 (整数/浮点数)
** - LUA_TSTRING: 字符串对象
** - LUA_TTABLE: 表对象
** - LUA_TFUNCTION: 函数对象 (Lua函数/C函数/闭包)
** - LUA_TUSERDATA: 用户数据 (完整/轻量)
** - LUA_TTHREAD: 协程对象
**
** 实现细节：
** 1. 检查栈空间是否足够（通过 api_checkstackspace）
** 2. 复制 TValue 内容到栈顶位置
** 3. 正确处理引用计数和垃圾回收标记
** 4. 更新栈顶指针
**
** 内存安全：
** - 自动处理垃圾回收对象的引用
** - 确保字符串和表等对象的正确引用
** - 维护栈的一致性状态
**
** 性能考虑：
** - 直接内存拷贝，避免类型转换开销
** - 内联优化友好的实现
** - 最小化函数调用栈深度
**
** 使用场景：
** - lua_pushvalue() 的内部实现
** - 从注册表或全局表取值时的结果压栈
** - 函数返回值的压栈处理
** - 表遍历过程中键值对的压栈
** - C函数向 Lua 返回值时的处理
**
** 注意事项：
** - 调用前必须确保栈有足够空间
** - 不对输入参数进行有效性检查
** - 假设 TValue 对象格式正确
** - 调用者负责管理栈的平衡
**
** 与其他函数的关系：
** - 是多个 lua_push* 函数的底层实现基础
** - 与 luaA_index2adr 函数配合使用
** - 依赖于 incr_top 宏进行栈管理
*/
LUAI_FUNC void luaA_pushobject (lua_State *L, const TValue *o);

/*
** ====================================================================
** [总结] Lua API 辅助模块总结
** ====================================================================
**
** 本头文件是 Lua C API 实现的核心辅助模块，虽然函数数量不多，
** 但在整个 API 体系中起到关键的桥梁作用。
**
** 主要特点：
**
** 1. [简洁性]
**    - 接口极简，只定义最核心的辅助函数
**    - 专注于最频繁使用的操作
**    - 避免功能重复和接口冗余
**
** 2. [高效性]
**    - 直接操作 TValue 对象，无类型转换开销
**    - 内存拷贝优化，最小化函数调用
**    - 为编译器内联优化提供友好接口
**
** 3. [安全性]
**    - 正确处理垃圾回收对象的引用
**    - 维护栈状态的一致性
**    - 支持所有 Lua 数据类型的安全压栈
**
** 4. [核心地位]
**    - 是众多 lua_push* 函数的实现基础
**    - 连接内部 TValue 表示和外部 API 接口
**    - 为用户提供类型安全的栈操作抽象
**
** 设计哲学：
** - 最小化接口原则：只暴露真正必要的内部函数
** - 性能优先：为高频操作提供最优化的实现路径
** - 类型安全：在底层确保所有类型操作的正确性
** - 模块化：与其他 API 模块清晰分离，职责明确
**
** 在 Lua 架构中的位置：
** - 位于 C API 和核心对象系统之间
** - 为上层 API 提供类型安全的底层操作
** - 与垃圾回收器、栈管理器紧密协作
** - 是 Lua/C 数据交换的关键通道
**
** 扩展考虑：
** - 当前设计已足够支持现有 API 需求
** - 新增函数应谨慎考虑，避免接口膨胀
** - 任何修改都需要考虑对性能的影响
** - 保持与现有 API 的兼容性
**
** 性能影响：
** - luaA_pushobject 是热点函数，影响整体性能
** - 优化此函数对提升 API 性能至关重要
** - 编译器优化对此模块效果显著
** - 内存访问模式影响缓存性能
*/

#endif
