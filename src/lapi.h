/*
** Lua API 辅助函数头文件 (lapi.h)
**
** 功能描述: Lua C API 的内部辅助函数声明
** 版权信息: 参见 lua.h 中的版权声明
**
** 模块概述:
** 本头文件定义了 Lua C API 实现中使用的内部辅助函数，主要用于
** 处理 Lua 值对象和栈操作的底层细节。
**
** 主要功能:
** - 提供 API 实现的核心辅助功能
** - 封装底层对象操作的复杂性
** - 维护 API 接口的一致性和安全性
**
** 依赖关系:
** - lobject.h: Lua 对象系统定义
**
** 注意事项:
** - 这是内部实现文件，不应被用户代码直接使用
** - 所有函数都假设调用环境的正确性
*/

// 头文件保护
#ifndef lapi_h
#define lapi_h

// 核心依赖模块包含
// 包含 lobject.h 以获取 TValue 结构体定义和 Lua 类型操作函数
#include "lobject.h"


// API 辅助函数接口声明

/*
** [核心] 对象值压栈函数
**
** 将一个 TValue 对象压入 Lua 栈顶
**
** 详细功能说明：
** - 负责将内部的 TValue 对象转换并压入 Lua 栈
** - 处理所有 Lua 数据类型的正确压栈操作
** - 维护栈状态的一致性和内存安全
**
** 参数说明：
** @param L - lua_State*：Lua 虚拟机状态指针
** @param o - const TValue*：要压入栈的 Lua 值对象
**
** 返回值：
** @return void：无返回值
**
** 算法复杂度：O(1) 时间，O(1) 空间
**
** 支持的数据类型：
** - LUA_TNIL: nil 值
** - LUA_TBOOLEAN: 布尔值 (true/false)
** - LUA_TNUMBER: 数字值 (整数/浮点数)
** - LUA_TSTRING: 字符串对象
** - LUA_TTABLE: 表对象
** - LUA_TFUNCTION: 函数对象 (Lua函数/C函数/闭包)
** - LUA_TUSERDATA: 用户数据 (完整/轻量)
** - LUA_TTHREAD: 协程对象
**
** 注意事项：
** - 调用前需要检查栈空间
** - 可能触发垃圾回收
** - 不进行参数有效性检查
** - 调用者负责管理栈的平衡
*/
LUAI_FUNC void luaA_pushobject (lua_State *L, const TValue *o);


/*
** Lua API 辅助模块总结
**
** 本头文件是 Lua C API 实现的核心辅助模块，虽然函数数量不多，
** 但在整个 API 体系中起到关键的桥梁作用。
**
** 主要特点：
** 1. 简洁性 - 接口极简，只定义最核心的辅助函数
** 2. 高效性 - 直接操作 TValue 对象，无类型转换开销
** 3. 安全性 - 正确处理垃圾回收对象的引用
** 4. 核心地位 - 是众多 lua_push* 函数的实现基础
**
** 设计哲学：
** - 最小化接口原则：只暴露真正必要的内部函数
** - 性能优先：为高频操作提供最优化的实现路径
** - 类型安全：在底层确保所有类型操作的正确性
** - 模块化：与其他 API 模块清晰分离，职责明确
**
** 在 Lua 架构中的位置：
** - 位于 C API 和核心对象系统之间
** - 为上层 API 提供类型安全的底层操作
** - 与垃圾回收器、栈管理器紧密协作
** - 是 Lua/C 数据交换的关键通道
*/

#endif
