/*
** ====================================================================
** Lua 元方法系统 (Metamethods)
** ====================================================================
** 
** 文件作用：
** 本文件定义了 Lua 元方法系统，这是 Lua 面向对象编程和运算符重载的核心机制。
** 元方法允许用户自定义对象的行为，实现运算符重载、属性访问控制等高级功能。
**
** 核心功能：
** 1. [元方法] 所有元方法类型的定义和管理
** 2. [查找] 高效的元方法查找和缓存机制  
** 3. [调用] 元方法的调用和参数传递
** 4. [优化] 快速访问路径和性能优化
** 5. [类型] 类型系统与元方法的集成
** 6. [继承] 元表继承和方法解析
**
** 设计特点：
** - 完整的运算符重载支持
** - 高效的元方法查找缓存
** - 类型安全的元方法调用
** - 灵活的面向对象编程支持
** - 与垃圾回收系统的深度集成
** - 性能优化的快速访问路径
**
** 元方法应用：
** - 算术运算符重载（+, -, *, /, % 等）
** - 比较运算符重载（==, <, <= 等）
** - 索引访问控制（__index, __newindex）
** - 对象生命周期管理（__gc）
** - 函数调用语义（__call）
** - 字符串转换（__tostring）
**
** 依赖关系：
** - lobject.h: 基础对象系统，提供表和值类型定义
*/

#ifndef ltm_h
#define ltm_h

#include "lobject.h"

/*
** ====================================================================
** [枚举] 元方法类型定义
** ====================================================================
*/

/*
** [枚举] 元方法类型枚举
**
** 重要提示：
** 如果修改此枚举的顺序，请搜索 "ORDER TM" 
** 并更新相关的数组、函数和常量定义
**
** 设计原理：
** - 元方法是 Lua 面向对象和运算符重载的基础
** - 每个元方法对应特定的语言操作或事件
** - 通过元表（metatable）机制实现方法查找
** - 支持用户自定义对象行为和语义
**
** 性能优化：
** - TM_EQ 之前的方法有快速访问路径
** - 常用方法放在枚举前部以优化查找
** - 缓存机制减少重复的元方法查找
**
** 分类说明：
** 1. 索引和访问控制元方法
** 2. 对象生命周期管理元方法  
** 3. 快速访问优化元方法
** 4. 算术运算重载元方法
** 5. 比较运算重载元方法
** 6. 其他特殊操作元方法
*/
typedef enum {
  /*
  ** [访问控制] 索引和属性访问元方法
  */
  TM_INDEX,             /* __index 元方法
                        ** 功能：当访问表中不存在的键时调用
                        ** 用途：实现属性访问、继承、代理等
                        ** 参数：(table, key)
                        ** 返回：访问结果或 nil
                        ** 
                        ** 应用场景：
                        ** - 面向对象编程中的方法继承
                        ** - 属性的动态计算和生成
                        ** - 代理对象和虚拟表的实现
                        ** - 默认值和回退机制 */
                        
  TM_NEWINDEX,          /* __newindex 元方法
                        ** 功能：当向表中不存在的键赋值时调用
                        ** 用途：实现属性设置控制、只读表等
                        ** 参数：(table, key, value)
                        ** 返回：无返回值
                        ** 
                        ** 应用场景：
                        ** - 属性设置的拦截和验证
                        ** - 只读表和访问控制
                        ** - 属性变化的监听和通知
                        ** - 数据验证和类型检查 */
  
  /*
  ** [生命周期] 对象管理元方法
  */
  TM_GC,                /* __gc 元方法（析构函数）
                        ** 功能：对象被垃圾回收前调用
                        ** 用途：资源清理、终结器、析构操作
                        ** 参数：(object)
                        ** 返回：无返回值
                        ** 
                        ** 应用场景：
                        ** - 文件句柄和网络连接的关闭
                        ** - 外部资源的释放和清理
                        ** - 对象销毁的日志记录
                        ** - 内存管理和缓存清理 */
                        
  TM_MODE,              /* __mode 元方法（弱引用模式）
                        ** 功能：控制表的弱引用行为
                        ** 用途：设置弱键、弱值或双向弱引用
                        ** 值："k"（弱键）、"v"（弱值）、"kv"（双向弱引用）
                        ** 
                        ** 应用场景：
                        ** - 缓存表和临时数据存储
                        ** - 避免循环引用导致的内存泄漏
                        ** - 对象注册表和观察者模式
                        ** - 内存敏感的数据结构 */
  
  /*
  ** [优化边界] 快速访问优化的分界线
  ** TM_EQ 是最后一个具有快速访问路径的元方法
  ** 这个边界用于性能优化，常用元方法放在此边界之前
  */
  TM_EQ,                /* __eq 元方法（相等比较）
                        ** 功能：自定义相等比较操作
                        ** 用途：重载 == 操作符的行为
                        ** 参数：(operand1, operand2)
                        ** 返回：布尔值表示是否相等
                        ** 
                        ** 应用场景：
                        ** - 自定义对象的相等性判断
                        ** - 复杂数据结构的比较
                        ** - 值对象的语义相等
                        ** - 集合和容器的元素比较 */
  
  /*
  ** [算术运算] 数学运算符重载元方法
  */
  TM_ADD,               /* __add 元方法（加法运算）
                        ** 功能：重载 + 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：运算结果 */
                        
  TM_SUB,               /* __sub 元方法（减法运算）
                        ** 功能：重载 - 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：运算结果 */
                        
  TM_MUL,               /* __mul 元方法（乘法运算）
                        ** 功能：重载 * 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：运算结果 */
                        
  TM_DIV,               /* __div 元方法（除法运算）
                        ** 功能：重载 / 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：运算结果 */
                        
  TM_MOD,               /* __mod 元方法（取模运算）
                        ** 功能：重载 % 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：运算结果 */
                        
  TM_POW,               /* __pow 元方法（幂运算）
                        ** 功能：重载 ^ 操作符
                        ** 参数：(base, exponent)
                        ** 返回：运算结果 */
                        
  TM_UNM,               /* __unm 元方法（负号运算）
                        ** 功能：重载一元 - 操作符
                        ** 参数：(operand)
                        ** 返回：运算结果 */
                        
  TM_LEN,               /* __len 元方法（长度运算）
                        ** 功能：重载 # 操作符
                        ** 参数：(operand)
                        ** 返回：长度值 */
  
  /*
  ** [比较运算] 关系比较操作符重载
  */
  TM_LT,                /* __lt 元方法（小于比较）
                        ** 功能：重载 < 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：布尔值 */
                        
  TM_LE,                /* __le 元方法（小于等于比较）
                        ** 功能：重载 <= 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：布尔值 */
  
  /*
  ** [特殊操作] 其他特殊操作元方法
  */
  TM_CONCAT,            /* __concat 元方法（连接运算）
                        ** 功能：重载 .. 操作符
                        ** 参数：(operand1, operand2)
                        ** 返回：连接结果 */
                        
  TM_CALL,              /* __call 元方法（函数调用）
                        ** 功能：使对象可以像函数一样调用
                        ** 参数：(object, ...)
                        ** 返回：调用结果 */
  
  /*
  ** [计数] 元方法总数
  */
  TM_N                  /* 枚举元素总数
                        ** 用途：数组大小确定、循环边界等
                        ** 注意：不是实际的元方法类型 */
} TMS;



/*
** ====================================================================
** [宏定义] 快速元方法访问宏
** ====================================================================
*/

/*
** [宏] 全局状态的快速元方法获取
**
** 功能：高效获取指定元表的元方法，带优化缓存
** @param g: global_State* 全局状态指针
** @param et: Table* 元表指针
** @param e: TMS 元方法类型枚举
** @return: TValue* 元方法值指针，如果不存在则返回 NULL
**
** 优化机制：
** 1. [快速检查] 首先检查元表是否为 NULL
** 2. [标志位检查] 检查元表的标志位缓存
** 3. [缓存命中] 如果缓存表明没有该元方法，直接返回 NULL
** 4. [实际查找] 否则调用 luaT_gettm 进行实际查找
**
** 标志位机制：
** - 每个元表维护一个标志位掩码
** - 每位对应一个元方法类型
** - 位为 1 表示该元方法不存在（负缓存）
** - 位为 0 表示可能存在，需要实际查找
**
** 性能优化：
** - 避免对不存在的元方法进行昂贵的查找
** - 减少哈希表访问和字符串比较
** - 特别优化常用的元方法访问路径
** - 标志位检查是位运算，非常快速
**
** 使用场景：
** - 虚拟机执行引擎的运算符重载
** - 高频元方法调用的性能优化
** - 运行时类型检查和方法解析
*/
#define gfasttm(g,et,e) ((et) == NULL ? NULL : \
  ((et)->flags & (1u<<(e))) ? NULL : luaT_gettm(et, e, (g)->tmname[e]))

/*
** [宏] 简化的快速元方法获取
**
** 功能：基于 Lua 状态的快速元方法获取简化版本
** @param l: lua_State* Lua 状态指针
** @param et: Table* 元表指针  
** @param e: TMS 元方法类型枚举
** @return: TValue* 元方法值指针，如果不存在则返回 NULL
**
** 实现原理：
** - 通过 G(l) 获取全局状态
** - 调用 gfasttm 宏进行实际处理
** - 提供更简洁的接口给虚拟机使用
**
** 使用便利性：
** - 虚拟机代码中更常见的调用形式
** - 自动处理全局状态的获取
** - 保持与 gfasttm 相同的优化特性
** - 减少调用代码的复杂性
*/
#define fasttm(l,et,e)	gfasttm(G(l), et, e)

/*
** ====================================================================
** [数据] 类型名称字符串数组
** ====================================================================
*/

/*
** [数据] Lua 类型名称映射数组
**
** 功能：提供 Lua 基本类型到字符串名称的映射
** 
** 用途：
** - 错误消息中的类型显示
** - 调试信息和类型检查
** - type() 函数的实现支持
** - 元方法错误报告的类型信息
**
** 数组内容：
** - 包含所有 Lua 基本类型的字符串表示
** - 索引与类型常量对应
** - 用于用户友好的类型显示
** - 支持国际化和本地化
**
** 访问方式：
** - 通过类型常量索引访问
** - 返回对应的类型名称字符串
** - 字符串是静态的，不需要释放
*/
LUAI_DATA const char *const luaT_typenames[];

/*
** ====================================================================
** [函数] 元方法管理函数
** ====================================================================
*/

/*
** [查找] 元方法获取函数
**
** 功能：从指定元表中获取指定类型的元方法
** @param events: Table* 元表指针
** @param event: TMS 元方法类型
** @param ename: TString* 元方法名称字符串
** @return: const TValue* 元方法值指针，不存在则返回 NULL
**
** 查找过程：
** 1. [有效性检查] 检查元表是否有效
** 2. [哈希查找] 在元表中查找元方法名称
** 3. [类型验证] 验证找到的值是否为有效元方法
** 4. [缓存更新] 更新元表的标志位缓存
**
** 缓存机制：
** - 查找失败时设置对应的标志位
** - 避免后续对相同元方法的重复查找
** - 提高频繁元方法访问的性能
** - 元表修改时需要清除缓存
**
** 元方法验证：
** - 检查值是否为函数或可调用对象
** - 某些元方法允许特定类型的值
** - 确保元方法调用的类型安全
**
** 使用场景：
** - 运算符重载的实现
** - 属性访问控制
** - 对象方法调用
** - 类型转换和强制转换
*/
LUAI_FUNC const TValue *luaT_gettm (Table *events, TMS event, TString *ename);

/*
** [查找] 基于对象的元方法获取函数
**
** 功能：根据对象自动确定元表并获取元方法
** @param L: lua_State* Lua 状态指针
** @param o: const TValue* 对象值指针
** @param event: TMS 元方法类型
** @return: const TValue* 元方法值指针，不存在则返回 NULL
**
** 自动元表解析：
** 1. [类型判断] 根据对象类型确定元表来源
** 2. [元表获取] 从对象或全局注册表获取元表
** 3. [元方法查找] 调用 luaT_gettm 进行实际查找
** 4. [结果返回] 返回找到的元方法或 NULL
**
** 支持的对象类型：
** - 表对象：使用对象自身的元表
** - 用户数据：使用对象的元表
** - 基本类型：使用全局注册表中的元表
** - 函数对象：支持函数元表（如果设置）
**
** 便利性优势：
** - 调用者不需要手动获取元表
** - 统一处理不同类型对象的元方法
** - 简化虚拟机和 API 代码
** - 提供类型安全的元方法访问
**
** 使用场景：
** - 虚拟机运算符实现
** - C API 中的元方法调用
** - 动态类型操作
** - 通用对象操作函数
*/
LUAI_FUNC const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o,
                                                       TMS event);

/*
** [初始化] 元方法系统初始化函数
**
** 功能：初始化 Lua 状态中的元方法系统
** @param L: lua_State* Lua 状态指针
**
** 初始化内容：
** 1. [名称表] 初始化元方法名称字符串表
** 2. [类型表] 设置基本类型名称数组
** 3. [缓存] 初始化元方法查找缓存
** 4. [注册表] 设置全局元表注册表
**
** 元方法名称表：
** - 创建所有元方法名称的字符串对象
** - 字符串内部化确保唯一性和快速比较
** - 提供元方法查找时的键值
** - 支持动态元方法名称解析
**
** 基本类型元表：
** - 为数值、字符串等基本类型预留元表槽位
** - 支持基本类型的运算符重载
** - 实现统一的元方法机制
** - 提供扩展基本类型行为的能力
**
** 调用时机：
** - Lua 状态机创建时
** - 虚拟机初始化阶段
** - 首次使用元方法功能前
** - 系统重置和重新初始化时
**
** 重要性：
** - 元方法系统的基础设施
** - 确保元方法机制正常工作
** - 性能优化的前提条件
** - 类型系统的重要组成部分
*/
LUAI_FUNC void luaT_init (lua_State *L);

#endif
